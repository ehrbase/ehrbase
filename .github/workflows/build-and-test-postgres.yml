name: "Assemble"

on:
  push:
    branches: [ develop, release/* ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

env:
  IMAGE_NAME: ehrbase/ehrbase
  IMAGE_TAG_BUILD: build
  IMAGE_TAG_TEST: test

jobs:

  #
  # Performs maven build and check as well as junit test result collection. Finally, creates the ehrbase docker image
  # and saves it, as an archive, for later usage.
  #
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup - Java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'maven'

      - name: Spotless - Check
        run: mvn spotless:check

      - name: Maven - Verify and Package
        run: mvn --batch-mode -U -Dmaven.test.failure.ignore=true verify package

      - name: Sonar - Analyze
        # Dependabot has no access to the SONAR_TOKEN secret.
        if: ${{ github.actor != 'dependabot[bot]' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn --batch-mode sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=ehrbase \
            -Dsonar.projectKey=ehrbase_ehrbase \
            -Dsonar.exclusions=test/** \
            -Dsonar.coverage.exclusions=test/** \
            -Dsonar.coverage.jacoco.xmlReportPaths=${{ github.workspace }}/test-coverage/target/site/jacoco-overall-coverage/jacoco.xml \
            -Dsonar.java.enablePreview=true

      - name: Docker - Set up Buildx
        uses: docker/setup-buildx-action@v3

      # build the test image for the actual architecture. This us needed for the robot tests because Docker uses a
      # legacy import format and is unable to use multi arch oci images (for now). As an alternative we could use
      # podman in the future.
      - name: Docker - Build Test Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          tags: ${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG_TEST }}
          outputs: type=docker,dest=${{ runner.temp }}/ehrbase-test.tar

      # build the release multi arch image
      - name: Docker - Build OCI Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG_BUILD }}
          outputs: type=oci,dest=${{ runner.temp }}/ehrbase-oci.tar

      - name: Upload - Test Image
        uses: actions/upload-artifact@v4
        with:
          name: ehrbase-image-test
          path: ${{ runner.temp }}/ehrbase-test.tar
          if-no-files-found: error
          retention-days: 1

      - name: Upload - OCI Image
        uses: actions/upload-artifact@v4
        with:
          name: ehrbase-image-oci
          path: ${{ runner.temp }}/ehrbase-oci.tar
          if-no-files-found: error
          retention-days: 1

      - name: Collect - JUnit Reports
        uses: dorny/test-reporter@v1
        # Dependabot has not enough rights to add the report to the run.
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          name: Unit Tests
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit
          fail-on-error: 'true'
          fail-on-empty: 'true'

  #
  # Uses the ehrbase docker image from [build] to run the robot integrations against it.
  #
  integration-test-run:
    runs-on: ubuntu-latest
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        test-suite: [
          # sanity checks
          { path: 'SANITY_TESTS', name: 'SANITY', tags: 'Sanity' },
          # rest/openehr/v1/definition
          { path: 'TEMPLATE_TESTS', name: 'TEMPLATE', tags: 'Template' },
          { path: 'STORED_QUERY_TESTS', name: 'STORED_QUERY', tags: 'stored_query', suite: 'TEST' },
          # rest/openehr/v1/ehr
          { path: 'EHR_SERVICE_TESTS', name: 'EHR_SERVICE', tags: 'EHR_SERVICE' },
          { path: 'EHR_STATUS_TESTS', name: 'EHR_STATUS', tags: 'EHR_STATUS' },
          { path: 'DIRECTORY_TESTS', name: 'DIRECTORY', tags: 'directory' },
          # rest/openehr/v1/ehr/{ehr_id}/contribution
          { path: 'CONTRIBUTION_TESTS', name: 'CONTRIBUTION', tags: 'CONTRIBUTION' },
          # rest/openehr/v1/ehr/{ehr_id}/composition
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_CREATE_1', tags: 'compositionANDcomposition_create_1' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_CREATE_2', tags: 'compositionANDcomposition_create_2' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_CREATE_3', tags: 'compositionANDcomposition_create_3' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_CREATE_4', tags: 'compositionANDcomposition_create_4' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_CREATE_5', tags: 'compositionANDcomposition_create_5' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_GET', tags: 'compositionANDcomposition_get' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_UPDATE', tags: 'compositionANDcomposition_update' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_DELETE', tags: 'compositionANDcomposition_delete' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_GET_VERSIONED', tags: 'compositionANDcomposition_get_versioned' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_VALIDATION', tags: 'COMPOSITION_validation' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_HEADERS_CHECKS', tags: 'HeadersChecks' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_ISM_TRANSITIONS', tags: 'compositionANDcomposition_ism_transitions' },
          { path: 'COMPOSITION_TESTS', name: 'COMPOSITION_WITH_DIFFERENT_TIME_ZONES', tags: 'COMPOSITION_dtz' },
          # rest/openehr/v1/query/aql - could be split into individual sub-suite
          { path: 'AQL_TESTS', name: 'AQL', tags: 'AQL_TESTS_PACKAGE' },
          # rest/rest/ecis
          { path: 'EHRSCAPE_TESTS', name: 'EHRSCAPE', tags: 'EhrScapeTag' },
          # TODO Still missing
          # FHIR_TERMINOLOGY
          # SECURITY_TESTS
        ]
    name: Robot (${{ matrix.test-suite.name }})

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download - Test Image
        uses: actions/download-artifact@v4
        with:
          name: ehrbase-image-test
          path: ${{ runner.temp }}

      - name: Docker - Load Image
        run: docker load --input ${{ runner.temp }}/ehrbase-test.tar

      # image used by the docker-compose-int-test.yml
      - name: Docker Compose - Setup env
        run: echo "EHRBASE_IMAGE=${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG_TEST }}" >> $GITHUB_ENV

      - name: Docker Compose - Starting
        run: docker compose -f docker-compose.yml -f tests/docker-compose-int-test.yml up -d

      - name: Run - Robot Test-Suite
        run: |
          docker compose -f docker-compose.yml -f tests/docker-compose-int-test.yml run --remove-orphans --rm ehrbase-integration-tests runRobotTest \
            --name ${{ matrix.test-suite.name }} \
            --path ${{ matrix.test-suite.path }} \
            --tags ${{ matrix.test-suite.tags }}

      - name: Docker Compose - Stopping
        if: always()
        run: docker compose -f docker-compose.yml -f tests/docker-compose-int-test.yml rm --stop --force --volumes

      - name: Archive - Robot results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-result-${{ matrix.test-suite.name }}
          path: ./tests/results/${{ matrix.test-suite.name }}/output.xml
          if-no-files-found: error

  #
  # Collect all Robot result from [integration-test-run] and generated the final report.
  #
  integration-test-results:
    name: Robot-Collect
    if: ${{ always() }}
    needs: [ build, integration-test-run ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download - Robot results
        uses: actions/download-artifact@v4
        with:
          pattern: robot-result-*
          path: ./tests/results/

      # FIXME use same integration test image as the compose is using
      - name: Generate - Robot Tests-Report
        run: |
          docker run \
            -v ./tests/results:/integration-tests/results \
            -v ./tests/report:/integration-tests/report \
            ehrbase/integration-tests:latest collectRebotResults

      - name: Github - Send Robot Report to PR
        # Dependabot has not enough rights to add the report to the PR.
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: joonvena/robotframework-reporter-action@v2.4
        with:
          gh_access_token: ${{ secrets.GITHUB_TOKEN }}
          report_path: ./tests/report
          show_passed_tests: false

      - name: Archive - Robot Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-report-final
          path: ./tests/report

      - name: Cleanup - Test Folder
        if: always()
        run: |
          rm -rf ./tests/result | true
          rm -rf ./tests/report | true

  # TODO docker deploy should be done here for develop, release/* and main

  #
  # Cleanup serialized oci image as well as intermediate robot results
  #
  cleanup:
    name: Cleanup
    if: ${{ always() }}
    needs: [
      build,
      integration-test-run,
      integration-test-results
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Delete - Test Image
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ehrbase-image-test
          failOnError: false

      - name: Delete - Intermediate Robot results
        uses: geekyeggo/delete-artifact@v5
        with:
          name: robot-result-*
          failOnError: false
