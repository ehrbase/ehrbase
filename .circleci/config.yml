version: 2.1

# Copyright (c) 2019 Wladislaw Wagner (Vitasystems GmbH).
# This file is part of Project EHRbase
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on a, Pablo Pazosn Vitasystems GmbHS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



#   88888888888  88        88  88888888ba   88888888ba         db         ad88888ba   88888888888
#   88           88        88  88      "8b  88      "8b       d88b       d8"     "8b  88
#   88           88        88  88      ,8P  88      ,8P      d8'`8b      Y8,          88
#   88aaaaa      88aaaaaaaa88  88aaaaaa8P'  88aaaaaa8P'     d8'  `8b     `Y8aaaaa,    88aaaaa
#   88"""""      88""""""""88  88""""88'    88""""""8b,    d8YaaaaY8b      `"""""8b,  88"""""
#   88           88        88  88    `8b    88      `8b   d8""""""""8b           `8b  88
#   88           88        88  88     `8b   88      a8P  d8'        `8b  Y8a     a8P  88
#   88888888888  88        88  88      `8b  88888888P"  d8'          `8b  "Y88888P"   88888888888


workflows:

  build-and-test:
    jobs:
      - build-artifacts:
          context: org-global
          filters:
            branches:
              ignore:
                - release
                - master


      - unit-tests:
          context: org-global
          filters:
            branches:
              ignore:
                - release
                - master

      - COMPOSITION-tests-1:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master
          # post-steps:
          #   - provide-test-status-report-via-slack #

      - COMPOSITION-tests-2:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - COMPOSITION-tests-3:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - COMPOSITION-tests-4:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - CONTRIBUTION-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - DIRECTORY-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - EHRSERVICE-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - EHRSTATUS-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - KNOWLEDGE-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - QUERYSERVICE-test-1:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - QUERYSERVICE-test-2:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              ignore:
                - release
                - master

      - ROBOT-REPORT:
          context: org-global
          requires:
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - CONTRIBUTION-test
            - DIRECTORY-test
            - EHRSERVICE-test
            - EHRSTATUS-test
            - KNOWLEDGE-test
            - QUERYSERVICE-test-1
            - QUERYSERVICE-test-2
          filters:
            branches:
              ignore:
                - release
                - master

  release:
    jobs:
      - build-artifacts:
          context: org-global
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - dependency-check:
          context: org-global
          requires:
            - build-artifacts
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - unit-tests:
          context: org-global
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - COMPOSITION-tests-1:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/
          # post-steps:
          #   - provide-test-status-report-via-slack #

      - COMPOSITION-tests-2:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - COMPOSITION-tests-3:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - COMPOSITION-tests-4:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - CONTRIBUTION-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - DIRECTORY-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - EHRSERVICE-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/
      
      - EHRSTATUS-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - KNOWLEDGE-test:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - QUERYSERVICE-test-1:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - QUERYSERVICE-test-2:
          context: org-global
          requires:
            - build-artifacts
            - unit-tests
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      - ROBOT-REPORT:
          context: org-global
          requires:
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - CONTRIBUTION-test
            - DIRECTORY-test
            - EHRSERVICE-test
            - EHRSTATUS-test
            - KNOWLEDGE-test
            - QUERYSERVICE-test-1
            - QUERYSERVICE-test-2
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|master)$/

      # - sonar-analysis:
      #     context: org-global
      #     requires:
      #       - build-artifacts
      #       - unit-tests
      #       - integration-tests
      #       - dependency-check
      #     filters:
      #       branches:
      #         only:
      #           - /^(release\/v\d+\.\d+\.\d+|master)$/





jobs:
#           88    ,ad8888ba,    88888888ba    ad88888ba
#           88   d8"'    `"8b   88      "8b  d8"     "8b
#           88  d8'        `8b  88      ,8P  Y8,
#           88  88          88  88aaaaaa8P'  `Y8aaaaa,
#           88  88          88  88""""""8b,    `"""""8b,
#           88  Y8,        ,8P  88      `8b          `8b
#   88,   ,d88   Y8a.    .a8P   88      a8P  Y8a     a8P
#    "Y8888P"     `"Y8888Y"'    88888888P"    "Y88888P"

  build-artifacts:
    machine:
      image: circleci/classic:201808-01
    steps:
      - configure-python-version
      - install-java-11
      - checkout
      - restore-build-artifacts-job-caches
      - setup-database
      - maven-package
      - persist-target-folder
      - save-build-artifacts-job-caches

  dependency-check:
    machine:
      image: circleci/classic:201808-01
    steps:
      - configure-python-version
      - install-java-11
      - checkout
      - attach_workspace:
          at: /home/circleci
      - restore-dependency-check-job-caches
      - run-dependency-check
      - persist-dependency-check-results
      - save-dependency-check-job-caches

  unit-tests:
    machine:
      image: circleci/classic:201808-01
    steps:
      - configure-python-version
      - install-java-11
      - checkout
      - restore-unit-tests-job-caches
      - setup-database
      - maven-test
      - save-unit-tests-job-caches
      # - persist-unit-test-coverage

  COMPOSITION-tests-1:
      machine:
          image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "compositionANDjson1"
              test-suite-path: "COMPOSITION_TESTS"
              test-suite-name: "COMPOSITION_1"

  COMPOSITION-tests-2:
      machine:
          image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "compositionANDjson2"
              test-suite-path: "COMPOSITION_TESTS"
              test-suite-name: "COMPOSITION_2"

  COMPOSITION-tests-3:
      machine:
          image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "compositionANDxml1"
              test-suite-path: "COMPOSITION_TESTS"
              test-suite-name: "COMPOSITION_3"

  COMPOSITION-tests-4:
      machine:
          image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "compositionANDxml2"
              test-suite-path: "COMPOSITION_TESTS"
              test-suite-name: "COMPOSITION_4"

  CONTRIBUTION-test:
      machine:
            image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "CONTRIBUTION"
              test-suite-path: "CONTRIBUTION_TESTS"
              test-suite-name: "CONTRIBUTION"

  DIRECTORY-test:
      machine:
            image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "directory"
              test-suite-path: "DIRECTORY_TESTS"
              test-suite-name: "DIRECTORY"

  EHRSERVICE-test:
      machine:
            image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "EHR_SERVICE"
              test-suite-path: "EHR_SERVICE_TESTS"
              test-suite-name: "EHR_SERVICE"
  
  EHRSTATUS-test:
      machine:
            image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "EHR_STATUS"
              test-suite-path: "EHR_STATUS_TESTS"
              test-suite-name: "EHR_STATUS"

  KNOWLEDGE-test:
      machine:
            image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "KNOWLEDGE"
              test-suite-path: "KNOWLEDGE_TESTS"
              test-suite-name: "KNOWLEDGE"

  QUERYSERVICE-test-1:
      machine:
            image: ubuntu-1604:201903-01
      steps:
        - run-robot-tests:
              include-tags: "adhoc-queryANDempty_db"
              test-suite-path: "QUERY_SERVICE_TESTS"
              test-suite-name: "ADHOC-QUERY-1"
  
  QUERYSERVICE-test-2:
    machine:
          image: ubuntu-1604:201903-01
    steps:
      - run-robot-tests:
            include-tags: "adhoc-queryANDloaded_db"
            test-suite-path: "QUERY_SERVICE_TESTS"
            test-suite-name: "ADHOC-QUERY-2"

  ROBOT-REPORT:
      machine:
        image: ubuntu-1604:201903-01
      steps:
          - configure-python-version
          - checkout
          - restore-integration-tests-job-caches
          - attach-tests-folder
          - merge-robot-outputs

  sonar-analysis:
    machine:
      image: circleci/classic:201808-01
    steps:
      - configure-python-version
      - install-java-11
      - checkout
      - attach_workspace:
          at: /home/circleci
      - restore-sonar-analysis-job-caches
      - run-sonar-analysis
      - save-sonar-analysis-job-caches





commands:
#     ,ad8888ba,    ,ad8888ba,    88b           d88  88b           d88         db         888b      88  88888888ba,     ad88888ba
#    d8"'    `"8b  d8"'    `"8b   888b         d888  888b         d888        d88b        8888b     88  88      `"8b   d8"     "8b
#   d8'           d8'        `8b  88`8b       d8'88  88`8b       d8'88       d8'`8b       88 `8b    88  88        `8b  Y8,
#   88            88          88  88 `8b     d8' 88  88 `8b     d8' 88      d8'  `8b      88  `8b   88  88         88  `Y8aaaaa,
#   88            88          88  88  `8b   d8'  88  88  `8b   d8'  88     d8YaaaaY8b     88   `8b  88  88         88    `"""""8b,
#   Y8,           Y8,        ,8P  88   `8b d8'   88  88   `8b d8'   88    d8""""""""8b    88    `8b 88  88         8P          `8b
#    Y8a.    .a8P  Y8a.    .a8P   88    `888'    88  88    `888'    88   d8'        `8b   88     `8888  88      .a8P   Y8a     a8P
#     `"Y8888Y"'    `"Y8888Y"'    88     `8'     88  88     `8'     88  d8'          `8b  88      `888  88888888Y"'     "Y88888P"
#                            88
#                            88                         ,d             ,d                             ,d
#                            88                         88             88                             88
#   8b,dPPYba,   ,adPPYba,   88,dPPYba,    ,adPPYba,  MM88MMM        MM88MMM  ,adPPYba,  ,adPPYba,  MM88MMM  ,adPPYba,
#   88P'   "Y8  a8"     "8a  88P'    "8a  a8"     "8a   88             88    a8P_____88  I8[    ""    88     I8[    ""
#   88          8b       d8  88       d8  8b       d8   88             88    8PP"""""""   `"Y8ba,     88      `"Y8ba,
#   88          "8a,   ,a8"  88b,   ,a8"  "8a,   ,a8"   88,            88,   "8b,   ,aa  aa    ]8I    88,    aa    ]8I
#   88           `"YbbdP"'   8Y"Ybbd8"'    `"YbbdP"'    "Y888          "Y888  `"Ybbd8"'  `"YbbdP"'    "Y888  `"YbbdP"'
#

  run-robot-tests:
      description: Run integration tests written in Robot Framework
      parameters:
          include-tags:
              description: Which tests to inclue by TAGs (Robot syntax applies!)
              type: string
          test-suite-path:
              description: Target test-suite given by it's folder name e.g. COMPOSITION_TESTS
              type: string
          test-suite-name:
              description: Titel of generated Robot Log/Report.html
              type: string
      steps:
        - configure-python-version
        - checkout
        - restore-integration-tests-job-caches
        - attach-target-folder
        - install-python-requirements
        - install-java-11
        - run:
            name: EXECUTE ROBOT COMMAND
            no_output_timeout: 30m
            command: |
                cd tests
                robot --include << parameters.include-tags >> \
                      --exclude TODO -e future -e obsolete -e libtest \
                      --console dotted \
                      --loglevel TRACE \
                      --noncritical not-ready \
                      --flattenkeywords for \
                      --flattenkeywords foritem \
                      --flattenkeywords name:_resources.* \
                      --outputdir results/<< parameters.test-suite-name >> \
                      --name << parameters.test-suite-name >> \
                      robot/<< parameters.test-suite-path >>/
        - save-integration-tests-job-caches
        - persist-tests-folder
        - store_test_results:
              path: ~/project/tests/results/
        - store_artifacts:
              path: ~/project/tests/results/


  merge-robot-outputs:
    description: Merge Robot Results from Parallel Tests
    steps:
      - run:
            command: |
                pip install robotframework
      - run:
            name: POST PROCESS & MERGE TEST RESULTS
            when: always
            command: |
                cd tests

                # Create Log/Report with ALL DETAILS
                rebot --outputdir results \
                      --name EHRbase \
                      --exclude TODO -e future -e obsolete -e libtest \
                      --removekeywords for \
                      --removekeywords wuks \
                      --loglevel TRACE \
                      --noncritical not-ready \
                      --output EHRbase-output.xml \
                      --log EHRbase-log.html \
                      --report EHRbase-report.html \
                      results/*/*.xml
      - run:
            name: GENERATE TEST SUMMARY
            when: always
            command: |
                cd tests

                # Create JUNIT report from merged results
                rebot --outputdir results \
                      --exclude TODO -e future -e obsolete -e libtest \
                      --noncritical not-ready \
                      --xunit junit-output.xml --xunitskipnoncritical \
                      --log NONE \
                      --report NONE \
                      results/EHRbase-output.xml
      - persist-tests-folder
      - store_test_results:
            path: ~/project/tests/results/
      - store_artifacts:
            path: ~/project/tests/results/





  #                                                 88                 ad88
  #     ,d                             ,d           ""                d8"
  #     88                             88                             88
  #   MM88MMM  ,adPPYba,  ,adPPYba,  MM88MMM        88  8b,dPPYba,  MM88MMM  8b,dPPYba,  ,adPPYYba,
  #     88    a8P_____88  I8[    ""    88           88  88P'   `"8a   88     88P'   "Y8  ""     `Y8
  #     88    8PP"""""""   `"Y8ba,     88           88  88       88   88     88          ,adPPPPP88
  #     88,   "8b,   ,aa  aa    ]8I    88,          88  88       88   88     88          88,    ,88
  #     "Y888  `"Ybbd8"'  `"YbbdP"'    "Y888        88  88       88   88     88          `"8bbdP"Y8
  #
  install-java-11:
    description: Install Zulu Java 11
    steps:
      - run:
          name: Install Zulu Java 11
          command: |
            wget https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-jdk_x64_linux_hotspot_11.0.3_7.tar.gz -O /tmp/openjdk-11.tar.gz
            sudo mkdir -p /usr/lib/jvm
            sudo tar xfvz /tmp/openjdk-11.tar.gz --directory /usr/lib/jvm
            rm -f /tmp/openjdk-11.tar.gz
            sudo sh -c 'for bin in /usr/lib/jvm/jdk-11.0.3+7/bin/*; do update-alternatives --install /usr/bin/$(basename $bin) $(basename $bin) $bin 100; done'
            sudo sh -c 'for bin in /usr/lib/jvm/jdk-11.0.3+7/bin/*; do update-alternatives --set $(basename $bin) $bin; done'
  configure-python-version:
    description: Configure Python version to 3.7.0
    steps:
      - run:
          name: Configure Python version to 3.7.0
          command: |
            pyenv global 3.7.0


  install-python-requirements:
    description: Install Python requirements
    steps:
      - run:
          name: Install Python requirements
          command: |
            python -c "import site; print(site.getsitepackages())"
            pip install -r ~/project/tests/requirements.txt


  setup-database:
    description: Setup ehrbase database
    steps:
      - run:
          name: Setup database
          command: |
            docker run --name ehrdb -e POSTGRES_USER=$POSTGRES_USER \
            -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -d \
            -p 5432:5432 ehrbaseorg/ehrbase-database-docker


  setup-file-repo:
    description: Setup file repo
    steps:
      - run:
          name: Unzip provided file repo
          command: |
            unzip ~/project/.circleci/file_repo_content.zip -d ~/project


  setup-jacoco-distribution:
    description: Download and unzip Jacoco distribution
    steps:
      - run:
          name: Download and unzip Jacoco disribution
          command: |
            mkdir -p ~/download
            cd ~/download
            [ -e jacoco-0.8.2.zip ] || wget https://repo1.maven.org/maven2/org/jacoco/jacoco/0.8.2/jacoco-0.8.2.zip
            mkdir -p ~/jacoco-0.8.2
            unzip -uo jacoco-0.8.2.zip -d ~/jacoco-0.8.2


  collect-integration-coverage:
    description: Collect integration test coverage
    steps:
      - run:
          name: Collect integration test coverage
          command: |
            java -jar ~/jacoco-0.8.2/lib/jacococli.jar dump \
              --destfile=/home/circleci/project/application/target/jacoco-it.exec


#                             88
#                             ""    ,d             ,d                             ,d
#                                   88             88                             88
#   88       88  8b,dPPYba,   88  MM88MMM        MM88MMM  ,adPPYba,  ,adPPYba,  MM88MMM  ,adPPYba,
#   88       88  88P'   `"8a  88    88             88    a8P_____88  I8[    ""    88     I8[    ""
#   88       88  88       88  88    88             88    8PP"""""""   `"Y8ba,     88      `"Y8ba,
#   "8a,   ,a88  88       88  88    88,            88,   "8b,   ,aa  aa    ]8I    88,    aa    ]8I
#    `"YbbdP'Y8  88       88  88    "Y888          "Y888  `"Ybbd8"'  `"YbbdP"'    "Y888  `"YbbdP"'
#

  maven-test:
    description: Test Maven app
    steps:
      - run:
          name: Test Maven app
          command: |
            cd ~/project
            mvn org.jacoco:jacoco-maven-plugin:0.8.2:prepare-agent test \
                org.jacoco:jacoco-maven-plugin:0.8.2:report

  persist-unit-test-coverage:
    description: Persist unit test coverage report to workspace
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/application/target/jacoco.exec


  save-unit-tests-job-caches:
    description: Save all caches in unit tests job
    steps:
      - save_cache:
          key: job-unit-tests-v1-mvn-dependencies-{{ checksum "~/project/pom.xml" }}
          paths:
            - ~/.m2/repository

  restore-unit-tests-job-caches:
    description: Restore all caches in unit tests job
    steps:
      - restore_cache:
          keys:
            - job-unit-tests-v1-mvn-dependencies-{{ checksum "~/project/pom.xml" }}
            - job-unit-tests-v1-mvn-dependencies


#
#
#
#   88,dPYba,,adPYba,   ,adPPYYba,  8b       d8   ,adPPYba,  8b,dPPYba,
#   88P'   "88"    "8a  ""     `Y8  `8b     d8'  a8P_____88  88P'   `"8a
#   88      88      88  ,adPPPPP88   `8b   d8'   8PP"""""""  88       88
#   88      88      88  88,    ,88    `8b,d8'    "8b,   ,aa  88       88
#   88      88      88  `"8bbdP"Y8      "8"       `"Ybbd8"'  88       88
#

  maven-package:
    description: Package Maven app
    steps:
      - run:
          name: Package Maven app
          command: |
            cd ~/project
            mvn package -DskipTests


#
#
#
#   ,adPPYba,   ,adPPYba,   8b,dPPYba,   ,adPPYYba,  8b,dPPYba,
#   I8[    ""  a8"     "8a  88P'   `"8a  ""     `Y8  88P'   "Y8
#    `"Y8ba,   8b       d8  88       88  ,adPPPPP88  88
#   aa    ]8I  "8a,   ,a8"  88       88  88,    ,88  88
#   `"YbbdP"'   `"YbbdP"'   88       88  `"8bbdP"Y8  88
#

  run-sonar-analysis:
    description: Run Sonar analysis
    steps:
      - run:
          name: Install sonar scanner
          command: |
            mkdir -p ~/downloads
            cd ~/downloads
            [ -e sonar-scanner-cli-3.3.0.1492-linux.zip ] || wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
            unzip -uo sonar-scanner-cli-3.3.0.1492-linux.zip -d ~
      - run:
          name: Excecute Sonar analysis
          command: |
            chmod 744 ~/project/.circleci/*.sh
            ~/sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner \
            -Dsonar.login=$SONARCLOUD_TOKEN \
            -Dsonar.branch.name=$CIRCLE_BRANCH \
            -Dsonar.branch.target=$(~/project/.circleci/get_target_branch.sh) \
            -Dsonar.projectVersion=$(~/project/.circleci/verify_and_return_version.sh)


  run-dependency-check:
    description: Run dependency vulnerability analysis
    steps:
      - run:
          name: Install dependency check
          command: |
            mkdir -p ~/downloads
            cd ~/downloads
            [ -e dependency-check-5.2.2-release.zip ] || wget https://dl.bintray.com/jeremy-long/owasp/dependency-check-5.2.2-release.zip
            mkdir -p ~/dependency_check
            unzip -uo dependency-check*.zip -d ~
      - run:
          name: Run dependency vulnerability analysis
          command: |
            cd ~/project
            ~/dependency-check/bin/dependency-check.sh \
                --project "EHRBase" --format JSON \
                -o vulnerability_analysis.json --scan .
      - run:
          name: Convert vulnerability analysis to sonar issues
          command: |
            pyenv global 3.7.0
            python ~/project/.circleci/convert_vulnerability_analysis.py \
                ~/project/vulnerability_analysis.json \
                ~/project/sonar_issues.json \
                application/src/main/java/com/ethercis/application/HipOpenEhr.java


#                                                88
#                                                88
#                                                88
#   8b      db      d8   ,adPPYba,   8b,dPPYba,  88   ,d8   ,adPPYba,  8b,dPPYba,   ,adPPYYba,   ,adPPYba,   ,adPPYba,
#   `8b    d88b    d8'  a8"     "8a  88P'   "Y8  88 ,a8"    I8[    ""  88P'    "8a  ""     `Y8  a8"     ""  a8P_____88
#    `8b  d8'`8b  d8'   8b       d8  88          8888[       `"Y8ba,   88       d8  ,adPPPPP88  8b          8PP"""""""
#     `8bd8'  `8bd8'    "8a,   ,a8"  88          88`"Yba,   aa    ]8I  88b,   ,a8"  88,    ,88  "8a,   ,aa  "8b,   ,aa
#       YP      YP       `"YbbdP"'   88          88   `Y8a  `"YbbdP"'  88`YbbdP"'   `"8bbdP"Y8   `"Ybbd8"'   `"Ybbd8"'
#                                                                      88
#                                                                      88

  persist-tests-folder:
    description: Persist Robot tests folder to workspace
    steps:
      - run:
            when: always
            command: |
                echo "persist test results"
      - persist_to_workspace:
            root: /home/circleci
            paths:
              - project/tests/results

  attach-tests-folder:
    description: Attach Robot tests folder back to workspace
    steps:
      - attach_workspace:
          at: /home/circleci


  persist-integration-test-coverage:
      description: Persist integration test coverage report to workspace
      steps:
        - persist_to_workspace:
            root: /home/circleci
            paths:
              - project/application/target/jacoco-it.exec


  persist-target-folder:
    description: Persist target folder to workspace
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/application/target

  attach-target-folder:
    description: Attach target folder back to workspace
    steps:
      - attach_workspace:
          at: /home/circleci


  persist-dependency-check-results:
    description: Persist dependency check results
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/sonar_issues.json



#                                           88
#                                           88
#                                           88
#        ,adPPYba,  ,adPPYYba,   ,adPPYba,  88,dPPYba,    ,adPPYba,
#       a8"     ""  ""     `Y8  a8"     ""  88P'    "8a  a8P_____88
#       8b          ,adPPPPP88  8b          88       88  8PP"""""""
#       "8a,   ,aa  88,    ,88  "8a,   ,aa  88       88  "8b,   ,aa
#        `"Ybbd8"'  `"8bbdP"Y8   `"Ybbd8"'  88       88   `"Ybbd8"'
#

  save-integration-tests-job-caches:
    description: Save all caches in interation tests job
    steps:
        - run:
            when: always
            command: echo "save integration test cache"
        - save_cache:
            key: job-integration-tests-v1-download-0.8.2
            paths:
                - ~/downloads
        - save_cache:
            key: job-integration-tests-v1-installation-0.8.2
            paths:
                - ~/jacoco-0.8.2
        - save_cache:
            key: job-integration-tests-v2-pip-{{ checksum "~/project/tests/requirements.txt" }}
            paths:
                - ~/.cache/pip
                # - /opt/circleci/.pyenv/versions/3.7.0/lib/python3.7/site-packages
        - save_cache:
             key: google-chrome-incl-webdriver-75
             paths:
               - ~/downloads/chrome

  restore-integration-tests-job-caches:
    description: Restore all caches in interation tests job
    steps:
      - restore_cache:
          keys:
            - job-integration-tests-v1-download-0.8.2
      - restore_cache:
          keys:
            - job-integration-tests-v1-installation-0.8.2
      - restore_cache:
          keys:
            - job-integration-tests-v2-pip-{{ checksum "~/project/tests/requirements.txt" }}
      - restore_cache:
          keys: google-chrome-incl-webdriver-


  save-dependency-check-job-caches:
    description: Save all caches in dependency check job
    steps:
      - save_cache:
          key: job-dependency-check-v1-download-5.2.2
          paths:
            - ~/downloads
      - save_cache:
          key: job-dependency-check-v1-installation-and-database-{{ epoch }}
          paths:
            - ~/dependency-check

  restore-dependency-check-job-caches:
    description: Restore all caches in dependency check job
    steps:
      - restore_cache:
          keys:
            - job-dependency-check-v1-download-5.2.2
      - restore_cache:
          keys:
            - job-dependency-check-v1-installation-and-database


  save-build-artifacts-job-caches:
      description: Save all caches in building artifacts job
      steps:
        - save_cache:
            key: job-build-artifacts-v1-mvn-dependencies-{{ checksum "~/project/pom.xml" }}
            paths:
              - ~/.m2/repository

  restore-build-artifacts-job-caches:
    description: Restore all caches in building artifacts job
    steps:
      - restore_cache:
          keys:
            - job-build-artifacts-v1-mvn-dependencies-{{ checksum "~/project/pom.xml" }}
            - job-build-artifacts-v1-mvn-dependencies


  save-sonar-analysis-job-caches:
    description: Save all caches in dependency check job
    steps:
      - save_cache:
          key: job-sonar-analysis-v1-download-3.3.0.1492
          paths:
            - ~/downloads
      - save_cache:
          key: job-sonar-analysis-v1-installation-3.3.0.1492
          paths:
            - ~/sonar-scanner-3.3.0.1492-linux
      - save_cache:
          key: job-sonar-analysis-v1-scannerwork-{{ epoch }}
          paths:
            - ~/project/.scannerwork
      - save_cache:
          key: job-sonar-analysis-v1-user-cache-{{ epoch }}
          paths:
            - ~/.sonar/cache

  restore-sonar-analysis-job-caches:
    description: Restore all caches in dependency check job
    steps:
      - restore_cache:
          keys:
            - job-sonar-analysis-v1-download-3.3.0.1492
      - restore_cache:
          keys:
            - job-sonar-analysis-v1-installation-3.3.0.1492
      - restore_cache:
          keys:
            - job-sonar-analysis-v1-scannerwork
      - restore_cache:
          keys:
            - job-sonar-analysis-v1-user-cache


  save-caches:
    description: Save all caches
    steps:
      - save_cache:
          paths:
            - ~/.m2/repository
          key: v1-mvn-dependencies-{{ checksum "pom.xml" }}

      - save_cache:
          paths:
            - ~/dependency-check
          key: v1-dependency-check-{{ epoch }}

  restore-caches:
    description: Restore all caches
    steps:
      - restore_cache:
          keys:
            - v1-mvn-dependencies-{{ checksum "pom.xml" }}
            - v1-mvn-dependencies-
      - restore_cache:
          keys:
            - v1-dependency-check-





#   ██████╗  █████╗  ██████╗██╗  ██╗██╗   ██╗██████╗
#   ██╔══██╗██╔══██╗██╔════╝██║ ██╔╝██║   ██║██╔══██╗
#   ██████╔╝███████║██║     █████╔╝ ██║   ██║██████╔╝
#   ██╔══██╗██╔══██║██║     ██╔═██╗ ██║   ██║██╔═══╝
#   ██████╔╝██║  ██║╚██████╗██║  ██╗╚██████╔╝██║
#   ╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝
#
#   [ BACKUP ]

  # upload-test-status-report-to-slack:
  #   description: Uploads status report to Slack
  #   steps:
  #       - run:
  #           name: Upload test status report to Slack
  #           command: |
  #               curl -F file=@/home/circleci/project/tests/results/test-status-report.png \
  #                    -F channels=playground \
  #                    -F title="${CIRCLE_PROJECT_REPONAME} TEST STATUS | ${CIRCLE_BRANCH}"  \
  #                    -H "Authorization: Bearer xoxp-701547379457-696494594291-710681511959-9c9a861be3770efdd4f8637a076bf8c8" \
  #                    https://slack.com/api/files.upload


  # save-chrome-and-chromedirver-download-cache:
  #   description: Save Google Chrome and chromedriver download to cache
  #   steps:
  #     - save_cache:
  #         key: google-chrome-incl-webdriver-{{ $CHROME_VERSION }}
  #         paths:
  #           - ~/downloads/chrome
  #
  #
  # restore-chrome-and-chromedirver-download-cache:
  #   description: Restore Google Chrome and chromedriver download from cache
  #   steps:
  #     - restore_cache:
  #         key: google-chrome-incl-webdriver-


  # COMPOSITION-tests-1:
  #     machine:
  #       image: ubuntu-1604:201903-01
  #     environment:
  #       POSTGRES_USER: postgres
  #       POSTGRES_PASSWORD: postgres
  #     steps:
  #       - configure-python-version
  #       - checkout
  #       - restore-integration-tests-job-caches
  #       - setup-jacoco-distribution
  #       - attach-target-folder
  #       - install-python-requirements
  #       - run-integration-tests:
  #           include: "compositionANDjson1"
  #       - save-integration-tests-job-caches


  # run-integration-tests:
  #   description: Run integration tests
  #   parameters:
  #     include:
  #       type: string
  #       default: xxx
  #   steps:
  #       - run:
  #           name: Run integration tests with coverage
  #           no_output_timeout: 45m
  #           command: |
  #               cd tests
  #               robot -d results --console dotted --noncritical not-ready -L TRACE \
  #                     -i << parameters.include >> \
  #                     -e libtest \
  #                     -e obsolete \
  #                     -e future \
  #                     -e TODO \
  #                     -e circleci \
  #                     -e EHRSCAPE \
  #                     --xunit junit-output.xml --xunitskipnoncritical \
  #                     -v CODE_COVERAGE:True \
  #                     -v JACOCO_LIB_PATH:/home/circleci/jacoco-0.8.2/lib \
  #                     -v COVERAGE_DIR:/home/circleci/project/application/target robot/


  # set-slack-build-status:
  #   description: Set status env at the end of a job based on success or failure.
  #   steps:
  #       - run:
  #           name: Slack - Setting Failure Condition
  #           when: on_fail
  #           command: |
  #               echo 'export SLACK_BUILD_STATUS="FAIL"' >> $BASH_ENV
  #       - run:
  #           when: on_success
  #           name: Slack - Setting Success Condition
  #           command: |
  #             echo 'export SLACK_BUILD_STATUS="PASS"' >> $BASH_ENV


  # provide-test-status-report-via-slack:
  #   description: Generates an integration test status report and sends it to our Slack channel
  #   steps:
  #       - set-slack-build-status
  #       - run:
  #           name: Download and install Chrome and Chromedriver
  #           when: always
  #           command: |
  #               mkdir -p ~/downloads/chrome
  #               cd ~/downloads/chrome
  #               sudo killall -9 apt-get || true && \
  #               sudo apt-get update && \
  #               sudo apt-get install -f lsb-release libappindicator3-1
  #               [ -e google-chrome.deb ] || curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  #               sudo dpkg --configure -a
  #               sudo dpkg -i google-chrome.deb
  #               sudo sed -i 's|HERE/chrome"|HERE/chrome" --no-sandbox|g' /opt/google/chrome/google-chrome
  #               rm google-chrome.deb
  #               CHROME_VERSION=$(google-chrome --version | sed -r 's/[^0-9]+([0-9]+\.[0-9]+\.[0-9]+).*/\1/g')
  #               CHROMEDRIVER_VERSION=$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION)
  #               [ -e chromedriver_linux64.zip ] || wget https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
  #               unzip chromedriver_linux64.zip
  #               sudo mv chromedriver /usr/local/bin/chromedriver
  #               sudo chown root:root /usr/local/bin/chromedriver
  #               sudo chmod +x /usr/local/bin/chromedriver
  #       - run:
  #           name: Check Browser Versions
  #           when: always
  #           command: |
  #               which chromedriver
  #               chromedriver --version
  #               google-chrome --version
  #       - run:
  #           name: Generate and Send  Test Report To Slack Channel
  #           when: always
  #           command: |
  #               cd tests
  #               cp robot/_resources/status_report.robot  results/status_report.robot
  #               cp robot/_resources/slack-message.json  results/slack-message.json
  #               cp robot/_resources/logo.jpg results/logo.jpg
  #               cd results
  #               robot -d trash --output NONE --log NONE --noncritical chill status_report.robot
  #       - store_test_results:
  #           path: ~/project/tests/results/
  #       - store_artifacts:
  #           path: ~/project/tests/results/